[0;34m[INFO][0m Applying server domain styles to navbar (mobile)
/**
 * Generated by Multi-Domain Component Build System
 * Component: navbar
 * Platform: mobile
 * Domain: server
 * Build Time: 2025-09-29T02:35:18Z
 * Source: components/global.c/mobile/navbar.js
 */

// Mobile Navbar Component
// Features: Hamburger menu, dropdown navigation, integrated ticker

class MobileNavbar {
  constructor(options = {}) {
    this.options = {
      containerId: 'mobile-navbar',
      logoText: 'Ascend Institute',
      logoHref: '/',
      showTicker: true,
      tickerText: 'Latest updates and announcements scroll here',
      ...options
    };
    
    this.isMenuOpen = false;
    this.init();
  }

  init() {
    this.render();
    this.attachEventListeners();
    
    if (this.options.showTicker) {
      this.initTicker();
    }
  }

  render() {
    const container = document.getElementById(this.options.containerId) || document.body;
    
    const navbarHTML = `
      <nav class="navbar-mobile" id="mobile-navbar-component">
        <div class="navbar-container">
          <div class="navbar-brand">
            <a href="${this.options.logoHref}" class="logo">
              ${this.options.logoText}
            </a>
          </div>
          
          <div class="navbar-toggle">
            <button class="hamburger" id="mobile-menu-toggle" aria-label="Toggle navigation">
              <span class="hamburger-line"></span>
              <span class="hamburger-line"></span>
              <span class="hamburger-line"></span>
            </button>
          </div>
        </div>
        
        <div class="mobile-menu" id="mobile-menu" style="display: none;">
          <div class="mobile-menu-items">
            <a href="/server/" class="nav-link">Home</a>
            <a href="/server/about" class="nav-link">About</a>
            <a href="/server/courses" class="nav-link">Courses</a>
            <a href="/server/resources" class="nav-link">Resources</a>
            <a href="/server/community" class="nav-link">Community</a>
            <a href="/server/contact" class="nav-link">Contact</a>
          </div>
        </div>
        
        ${this.options.showTicker ? this.renderTicker() : ''}
      </nav>
      
      <style>
        .navbar-mobile {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          z-index: 1000;
          background: white;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .navbar-container {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 1rem;
          height: 64px;
          box-sizing: border-box;
        }
        
        .navbar-brand .logo {
          font-size: 1.25rem;
          font-weight: bold;
          text-decoration: none;
          color: #333;
        }
        
        .hamburger {
          display: flex;
          flex-direction: column;
          justify-content: space-around;
          width: 24px;
          height: 24px;
          background: transparent;
          border: none;
          cursor: pointer;
          padding: 10px;
          min-width: 44px;
          min-height: 44px;
        }
        
        .hamburger-line {
          width: 24px;
          height: 3px;
          background: #333;
          border-radius: 2px;
          transition: all 0.3s ease;
        }
        
        .hamburger.active .hamburger-line:nth-child(1) {
          transform: rotate(45deg) translate(6px, 6px);
        }
        
        .hamburger.active .hamburger-line:nth-child(2) {
          opacity: 0;
        }
        
        .hamburger.active .hamburger-line:nth-child(3) {
          transform: rotate(-45deg) translate(6px, -6px);
        }
        
        .mobile-menu {
          background: white;
          border-top: 1px solid #e5e5e5;
          max-height: 0;
          overflow: hidden;
          transition: max-height 0.3s ease;
        }
        
        .mobile-menu.active {
          max-height: 400px;
          display: block !important;
        }
        
        .mobile-menu-items {
          display: flex;
          flex-direction: column;
        }
        
        .mobile-menu .nav-link {
          display: block;
          padding: 12px 16px;
          color: #333;
          text-decoration: none;
          border-bottom: 1px solid #f0f0f0;
          min-height: 44px;
          display: flex;
          align-items: center;
          transition: background-color 0.2s ease;
        }
        
        .mobile-menu .nav-link:hover {
          background-color: #f8f9fa;
        }
        
        .mobile-menu .nav-link:last-child {
          border-bottom: none;
        }
        
        /* Ticker styles */
        .ticker-mobile {
          height: 32px;
          background: #333;
          color: white;
          overflow: hidden;
          position: relative;
          display: flex;
          align-items: center;
        }
        
        .ticker-content {
          animation: ticker 30s linear infinite;
          white-space: nowrap;
          padding-left: 100%;
          font-size: 0.875rem;
        }
        
        @keyframes ticker {
          0% { transform: translateX(100%); }
          100% { transform: translateX(-100%); }
        }
        
        /* Ensure body has top margin for fixed navbar */
        body {
          margin-top: ${this.options.showTicker ? '96px' : '64px'};
        }
        
        @media (min-width: 769px) {
          .navbar-mobile {
            display: none;
          }
        }
      </style>
    `;
    
    if (container.id === this.options.containerId) {
      container.innerHTML = navbarHTML;
    } else {
      container.insertAdjacentHTML('afterbegin', navbarHTML);
    }
  }
  
  renderTicker() {
    return `
      <div class="ticker-mobile">
        <div class="ticker-content">
          ${this.options.tickerText}
        </div>
      </div>
    `;
  }
  
  initTicker() {
    // Additional ticker initialization if needed
    const tickerContent = document.querySelector('.ticker-content');
    if (tickerContent) {
      // Pause animation on hover
      tickerContent.addEventListener('mouseenter', () => {
        tickerContent.style.animationPlayState = 'paused';
      });
      
      tickerContent.addEventListener('mouseleave', () => {
        tickerContent.style.animationPlayState = 'running';
      });
    }
  }

  attachEventListeners() {
    const menuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (menuToggle && mobileMenu) {
      menuToggle.addEventListener('click', () => {
        this.toggleMenu();
      });
      
      // Close menu when clicking on links
      const navLinks = mobileMenu.querySelectorAll('.nav-link');
      navLinks.forEach(link => {
        link.addEventListener('click', () => {
          this.closeMenu();
        });
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!menuToggle.contains(e.target) && !mobileMenu.contains(e.target)) {
          this.closeMenu();
        }
      });
    }
  }

  toggleMenu() {
    const menuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    this.isMenuOpen = !this.isMenuOpen;
    
    if (menuToggle) {
      menuToggle.classList.toggle('active', this.isMenuOpen);
    }
    
    if (mobileMenu) {
      mobileMenu.classList.toggle('active', this.isMenuOpen);
    }
  }

  closeMenu() {
    const menuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    this.isMenuOpen = false;
    
    if (menuToggle) {
      menuToggle.classList.remove('active');
    }
    
    if (mobileMenu) {
      mobileMenu.classList.remove('active');
    }
  }
  
  updateTickerText(newText) {
    const tickerContent = document.querySelector('.ticker-content');
    if (tickerContent) {
      tickerContent.textContent = newText;
    }
  }
  
  destroy() {
    const navbar = document.getElementById('mobile-navbar-component');
    if (navbar) {
      navbar.remove();
    }
    
    // Reset body margin
    document.body.style.marginTop = '0';
  }
}

// Auto-initialize on DOM ready
if (typeof document !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    if (window.innerWidth <= 768) {
      new MobileNavbar();
    }
  });
}

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = MobileNavbar;
}
