[0;34m[INFO][0m Applying dev domain styles to svg-card (desktop)
/**
 * Generated by Multi-Domain Component Build System
 * Component: svg-card
 * Platform: desktop
 * Domain: dev
 * Build Time: 2025-09-29T02:37:54Z
 * Source: components/global.c/desktop/svg-card.js
 */

// Desktop SVG Card Component
// SVG-based card with desktop interactions and hover effects

class DesktopSVGCard {
  constructor(options = {}) {
    this.options = {
      containerId: null,
      title: 'SVG Card',
      description: 'SVG-enhanced card component',
      iconSvg: null,
      iconType: 'default', // default, tech, finance, education
      linkUrl: null,
      linkText: 'Learn More',
      variant: 'default', // default, gradient, outline, glass
      color: '#3b82f6',
      size: 'medium', // small, medium, large
      interactive: true,
      ...options
    };
    
    this.init();
  }

  init() {
    this.render();
    if (this.options.interactive) {
      this.attachEventListeners();
    }
  }

  render() {
    const container = this.options.containerId ? 
      document.getElementById(this.options.containerId) : 
      document.createElement('div');
    
    const cardHTML = `
      <div class="svg-card-desktop ${this.options.variant} ${this.options.size}" data-card-id="${this.generateId()}">
        <div class="svg-card-icon">
          ${this.renderIcon()}
        </div>
        <div class="svg-card-content">
          <h3 class="svg-card-title">${this.options.title}</h3>
          <p class="svg-card-description">${this.options.description}</p>
          ${this.options.linkUrl ? this.renderButton() : ''}
        </div>
        <div class="svg-card-overlay"></div>
      </div>
      
      <style>
        .svg-card-desktop {
          background: white;
          border-radius: 16px;
          padding: 2rem;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
          border: 1px solid #f1f5f9;
          transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          text-align: center;
          position: relative;
          overflow: hidden;
          cursor: pointer;
          display: flex;
          flex-direction: column;
          align-items: center;
        }
        
        .svg-card-desktop:hover {
          transform: translateY(-8px);
          box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
          border-color: ${this.options.color}30;
        }
        
        .svg-card-desktop:active {
          transform: translateY(-4px);
        }
        
        /* Size variants */
        .svg-card-desktop.small {
          padding: 1.5rem;
          min-width: 200px;
        }
        
        .svg-card-desktop.small .svg-card-icon {
          width: 48px;
          height: 48px;
        }
        
        .svg-card-desktop.small .svg-card-icon svg {
          width: 24px;
          height: 24px;
        }
        
        .svg-card-desktop.medium {
          min-width: 250px;
        }
        
        .svg-card-desktop.large {
          padding: 2.5rem;
          min-width: 300px;
        }
        
        .svg-card-desktop.large .svg-card-icon {
          width: 80px;
          height: 80px;
        }
        
        .svg-card-desktop.large .svg-card-icon svg {
          width: 40px;
          height: 40px;
        }
        
        /* Variant styles */
        .svg-card-desktop.gradient {
          background: linear-gradient(135deg, ${this.options.color}10 0%, ${this.options.color}05 100%);
          border-color: ${this.options.color}20;
        }
        
        .svg-card-desktop.gradient:hover {
          background: linear-gradient(135deg, ${this.options.color}15 0%, ${this.options.color}08 100%);
        }
        
        .svg-card-desktop.outline {
          background: transparent;
          border: 2px solid ${this.options.color}40;
        }
        
        .svg-card-desktop.outline:hover {
          background: ${this.options.color}05;
          border-color: ${this.options.color};
        }
        
        .svg-card-desktop.outline .svg-card-title {
          color: ${this.options.color};
        }
        
        .svg-card-desktop.glass {
          background: rgba(255, 255, 255, 0.25);
          backdrop-filter: blur(10px);
          border: 1px solid rgba(255, 255, 255, 0.18);
        }
        
        .svg-card-desktop.glass:hover {
          background: rgba(255, 255, 255, 0.35);
        }
        
        /* Icon container */
        .svg-card-icon {
          width: 64px;
          height: 64px;
          margin-bottom: 1.5rem;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          background: ${this.options.color}15;
          transition: all 0.4s ease;
          position: relative;
          z-index: 2;
        }
        
        .svg-card-desktop:hover .svg-card-icon {
          transform: scale(1.1) rotate(5deg);
          background: ${this.options.color}25;
          box-shadow: 0 8px 16px rgba(59, 130, 246, 0.2);
        }
        
        .svg-card-icon svg {
          width: 32px;
          height: 32px;
          color: ${this.options.color};
          transition: all 0.4s ease;
        }
        
        .svg-card-desktop:hover .svg-card-icon svg {
          color: ${this.options.color};
          filter: drop-shadow(0 2px 4px rgba(59, 130, 246, 0.3));
        }
        
        /* Content styles */
        .svg-card-content {
          flex: 1;
          display: flex;
          flex-direction: column;
          align-items: center;
          position: relative;
          z-index: 2;
        }
        
        .svg-card-title {
          font-size: 1.25rem;
          font-weight: 600;
          color: #1e293b;
          margin: 0 0 1rem 0;
          line-height: 1.4;
          transition: color 0.3s ease;
        }
        
        .svg-card-desktop:hover .svg-card-title {
          color: ${this.options.color};
        }
        
        .svg-card-description {
          font-size: 0.95rem;
          color: #64748b;
          line-height: 1.6;
          margin: 0 0 1.5rem 0;
          text-align: center;
          transition: color 0.3s ease;
        }
        
        .svg-card-desktop:hover .svg-card-description {
          color: #475569;
        }
        
        /* Button styles */
        .svg-card-button {
          background: ${this.options.color};
          color: white;
          border: none;
          padding: 0.75rem 1.5rem;
          border-radius: 8px;
          font-size: 0.9rem;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          display: inline-flex;
          align-items: center;
          gap: 0.5rem;
          opacity: 0;
          transform: translateY(10px);
        }
        
        .svg-card-desktop:hover .svg-card-button {
          opacity: 1;
          transform: translateY(0);
        }
        
        .svg-card-button:hover {
          background: ${this.options.color}dd;
          transform: translateY(-2px);
          box-shadow: 0 8px 16px rgba(59, 130, 246, 0.3);
        }
        
        /* Overlay for hover effects */
        .svg-card-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: radial-gradient(circle at center, ${this.options.color}05 0%, transparent 70%);
          opacity: 0;
          transition: opacity 0.4s ease;
          z-index: 1;
        }
        
        .svg-card-desktop:hover .svg-card-overlay {
          opacity: 1;
        }
        
        /* Loading state */
        .svg-card-desktop.loading {
          pointer-events: none;
          opacity: 0.7;
        }
        
        .svg-card-desktop.loading .svg-card-icon svg {
          animation: spin 2s linear infinite;
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        /* Focus states */
        .svg-card-desktop:focus {
          outline: 2px solid ${this.options.color};
          outline-offset: 4px;
        }
        
        /* Hide on mobile */
        @media (max-width: 768px) {
          .svg-card-desktop {
            display: none;
          }
        }
        
        /* Responsive adjustments */
        @media (max-width: 1024px) {
          .svg-card-desktop {
            padding: 1.5rem;
            min-width: 200px;
          }
          
          .svg-card-desktop.large {
            padding: 2rem;
            min-width: 250px;
          }
        }
        
        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
          .svg-card-desktop {
            background: #1e293b;
            border-color: #334155;
          }
          
          .svg-card-title {
            color: #f8fafc;
          }
          
          .svg-card-description {
            color: #cbd5e1;
          }
          
          .svg-card-desktop:hover .svg-card-description {
            color: #e2e8f0;
          }
          
          .svg-card-desktop.gradient {
            background: linear-gradient(135deg, ${this.options.color}15 0%, ${this.options.color}08 100%);
          }
          
          .svg-card-desktop.outline {
            background: transparent;
          }
          
          .svg-card-desktop.outline:hover {
            background: ${this.options.color}10;
          }
          
          .svg-card-desktop.glass {
            background: rgba(30, 41, 59, 0.25);
            border-color: rgba(203, 213, 225, 0.18);
          }
        }
        
        /* Print styles */
        @media print {
          .svg-card-desktop {
            break-inside: avoid;
            box-shadow: none;
            border: 1px solid #e2e8f0;
          }
          
          .svg-card-button {
            opacity: 1;
            transform: none;
          }
        }
      </style>
    `;
    
    if (this.options.containerId) {
      container.innerHTML = cardHTML;
    } else {
      container.innerHTML = cardHTML;
      return container;
    }
  }

  renderIcon() {
    if (this.options.iconSvg) {
      return this.options.iconSvg;
    }
    
    // Default icons based on type
    const icons = {
      default: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
      `,
      tech: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0L19.2 12l-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"/>
        </svg>
      `,
      finance: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
        </svg>
      `,
      education: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3L1 9l11 6 9-4.91V17h2V9L12 3z"/>
        </svg>
      `,
      analytics: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
        </svg>
      `,
      security: `
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z"/>
        </svg>
      `
    };
    
    return icons[this.options.iconType] || icons.default;
  }

  renderButton() {
    return `
      <a href="${this.options.linkUrl}" class="svg-card-button">
        ${this.options.linkText}
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M7.33 24l-2.83-2.829 9.339-9.175-9.339-9.167 2.83-2.829 12.17 11.996z"/>
        </svg>
      </a>
    `;
  }

  attachEventListeners() {
    const card = document.querySelector(`[data-card-id="${this.generateId()}"]`);
    const button = card?.querySelector('.svg-card-button');
    
    if (card && this.options.interactive) {
      // Card click handling
      card.addEventListener('click', (e) => {
        if (!e.target.closest('.svg-card-button')) {
          this.onCardClick(e);
        }
      });
      
      // Keyboard navigation
      card.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.onCardClick(e);
        }
      });
      
      // Make card focusable
      card.setAttribute('tabindex', '0');
      
      // Mouse enter/leave for additional effects
      card.addEventListener('mouseenter', () => {
        this.onMouseEnter();
      });
      
      card.addEventListener('mouseleave', () => {
        this.onMouseLeave();
      });
    }
    
    if (button) {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        this.onButtonClick(e);
      });
    }
  }

  onMouseEnter() {
    // Additional hover effects can be added here
    const customEvent = new CustomEvent('svgCardHover', {
      detail: { 
        cardId: this.generateId(),
        title: this.options.title,
        type: 'enter'
      }
    });
    document.dispatchEvent(customEvent);
  }

  onMouseLeave() {
    const customEvent = new CustomEvent('svgCardHover', {
      detail: { 
        cardId: this.generateId(),
        title: this.options.title,
        type: 'leave'
      }
    });
    document.dispatchEvent(customEvent);
  }

  onCardClick(event) {
    if (this.options.linkUrl) {
      window.open(this.options.linkUrl, '_blank');
    } else {
      const customEvent = new CustomEvent('svgCardClick', {
        detail: { 
          cardId: this.generateId(),
          title: this.options.title,
          options: this.options 
        }
      });
      document.dispatchEvent(customEvent);
    }
  }

  onButtonClick(event) {
    const customEvent = new CustomEvent('svgCardButtonClick', {
      detail: { 
        cardId: this.generateId(),
        title: this.options.title,
        options: this.options 
      }
    });
    document.dispatchEvent(customEvent);
  }

  generateId() {
    if (!this._id) {
      this._id = 'svg-card-' + Math.random().toString(36).substr(2, 9);
    }
    return this._id;
  }

  setLoading(isLoading) {
    const card = document.querySelector(`[data-card-id="${this.generateId()}"]`);
    if (card) {
      if (isLoading) {
        card.classList.add('loading');
      } else {
        card.classList.remove('loading');
      }
    }
  }

  updateContent(newOptions) {
    this.options = { ...this.options, ...newOptions };
    
    const card = document.querySelector(`[data-card-id="${this.generateId()}"]`);
    if (card) {
      const title = card.querySelector('.svg-card-title');
      const description = card.querySelector('.svg-card-description');
      const button = card.querySelector('.svg-card-button');
      const icon = card.querySelector('.svg-card-icon');
      
      if (title && newOptions.title) title.textContent = newOptions.title;
      if (description && newOptions.description) description.textContent = newOptions.description;
      if (button && newOptions.linkText) button.textContent = newOptions.linkText;
      if (icon && newOptions.iconSvg) icon.innerHTML = newOptions.iconSvg;
    }
  }

  setVariant(variant) {
    const card = document.querySelector(`[data-card-id="${this.generateId()}"]`);
    if (card) {
      card.classList.remove('default', 'gradient', 'outline', 'glass');
      card.classList.add(variant);
      this.options.variant = variant;
    }
  }

  setColor(color) {
    this.options.color = color;
    // Re-render to apply new color
    this.render();
    if (this.options.interactive) {
      this.attachEventListeners();
    }
  }

  destroy() {
    const card = document.querySelector(`[data-card-id="${this.generateId()}"]`);
    if (card) {
      card.remove();
    }
  }

  // Static method to create feature grid
  static createFeatureGrid(featuresData, containerSelector, columns = 3) {
    const container = document.querySelector(containerSelector);
    if (!container) return [];
    
    container.style.display = 'grid';
    container.style.gridTemplateColumns = `repeat(auto-fit, minmax(250px, 1fr))`;
    container.style.gap = '2rem';
    container.style.alignItems = 'start';
    
    const cards = [];
    featuresData.forEach((featureData, index) => {
      const cardElement = document.createElement('div');
      cardElement.id = `desktop-svg-card-${index}`;
      container.appendChild(cardElement);
      
      const card = new DesktopSVGCard({
        ...featureData,
        containerId: cardElement.id
      });
      cards.push(card);
    });
    
    return cards;
  }
}

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DesktopSVGCard;
}
